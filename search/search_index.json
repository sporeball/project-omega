{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the documentation of Project OMEGA, sporeball 's first Arduino project! About Project OMEGA Contrary to its name, Project OMEGA is a tiny game console, powered by the Adafruit METRO Mini and an 8x8 LED matrix. The hope is that this minimal setup can result in a board that's easy to write code for and fun to play games with. All of the code driving Project OMEGA, as well as this documentation, is available on GitHub ! Anyone is welcome to contribute. Getting started Check out the getting started tutorial for a step-by-step guide to writing your first game! Alternatively, dive straight into the API reference to learn about everything you can do with Project OMEGA.","title":"About"},{"location":"#welcome","text":"Welcome to the documentation of Project OMEGA, sporeball 's first Arduino project!","title":"Welcome"},{"location":"#about-project-omega","text":"Contrary to its name, Project OMEGA is a tiny game console, powered by the Adafruit METRO Mini and an 8x8 LED matrix. The hope is that this minimal setup can result in a board that's easy to write code for and fun to play games with. All of the code driving Project OMEGA, as well as this documentation, is available on GitHub ! Anyone is welcome to contribute.","title":"About Project OMEGA"},{"location":"#getting-started","text":"Check out the getting started tutorial for a step-by-step guide to writing your first game! Alternatively, dive straight into the API reference to learn about everything you can do with Project OMEGA.","title":"Getting started"},{"location":"api-reference/","text":"API reference This page contains the API reference for Project OMEGA. Methods void init() Sets the proper data transmission rate, and initializes the display and buttons. This function should be called first. void splash() Accesses the display, drawing a bitmap of the omega symbol to it, before running the rest of your code. int poll() Returns an integer from 4 to 8 inclusive if a button has just been pressed, or 0 if no button press is detected. The select button is associated with the lowest value of 4, followed by the right, up, left, and down buttons. You should write your own function to determine how this should make your game behave, then call it repeatedly using void update() . Objects matrix The display. For a detailed description of the available graphics primitives, read Adafruit's guide .","title":"API reference"},{"location":"api-reference/#api-reference","text":"This page contains the API reference for Project OMEGA.","title":"API reference"},{"location":"api-reference/#methods","text":"void init() Sets the proper data transmission rate, and initializes the display and buttons. This function should be called first. void splash() Accesses the display, drawing a bitmap of the omega symbol to it, before running the rest of your code. int poll() Returns an integer from 4 to 8 inclusive if a button has just been pressed, or 0 if no button press is detected. The select button is associated with the lowest value of 4, followed by the right, up, left, and down buttons. You should write your own function to determine how this should make your game behave, then call it repeatedly using void update() .","title":"Methods"},{"location":"api-reference/#objects","text":"matrix The display. For a detailed description of the available graphics primitives, read Adafruit's guide .","title":"Objects"},{"location":"getting-started/","text":"Getting started This tutorial will act as a step-by-step guide to get you writing and running your first Project OMEGA game. Setup Make sure you've installed the Arduino IDE for your operating system of choice before continuing. From there, you'll need to install Project OMEGA's dependencies: Adafruit_GFX Adafruit_LEDBackpack Bounce2 Caution The version of the Bounce2 library that's hosted at the provided GitHub link will not work with Project OMEGA. Be sure to install it through the Arduino IDE, in Tools > Manage Libraries. After everything is installed, open up a blank sketch in the Arduino IDE. You should see the standard setup() and loop() functions. Don't worry about these for now; we'll get to them in a moment. Importing the library To import the Project OMEGA library, add the following lines just before the setup() function: #include <Omega.h> Omega omega = Omega(); The first line actually imports the definitions added by the library; the second line creates an object named omega with the same definitions. You'll use this object in your game code later on. Note omega is the recommended name for the object, though you can change it to any other name you'd like. The setup function The setup() function will run just once, at the beginning of your sketch's execution. Add the line omega.init(); inside it. This is used to set up the board's buttons and display; as such, your program will not run without it. If you'd like, you can call the splash() function after this, using omega.splash(); . This is completely optional, though recommended. With this change, a bitmap of the Greek letter omega will be drawn to the display before your game code starts to execute. Finally, we should try drawing something to the display. Add the following lines of code to the end of the function: omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); This will use methods added by Adafruit's graphics library to clear the display and light up the pixel in the top left corner. The loop function To make proper use of the loop() function, we'll have to use one more OMEGA-defined method: omega.poll() . This will repeatedly return an integer from 4 to 8 back to your code if a button was pressed, and 0 otherwise. You'll need to write your own function to determine how this should make your game behave. Add the following function definition to your Arduino sketch, before void loop() : void poll() { switch (omega.poll()) { case 0: break; default: omega.matrix.drawPixel(0, 0, LED_OFF); omega.matrix.writeDisplay(); delay(125); } omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } This function is actually pretty simple! The switch keyword says to do something depending on the output of what's in the parentheses \u2014 in this case, a call to omega.poll() . We do nothing if it returns a 0, and every other case will do the same thing: turn off the pixel in the top left corner of the display. Outside of the switch block, we then turn it on again after a fraction of a second. Finally, we change the loop() function so that it repeatedly calls our new poll() function: void loop() { poll(); } If you set everything up correctly, you should be able to make the top left pixel of the display flash any time you press a button! Note When writing your poll() function, you'll typically want to add a new case for each of the buttons you plan to detect. Remember that these are connected to the numbers 4 through 8, not 0. The final result #include <Omega.h> Omega omega = Omega(); void setup() { omega.init(); omega.splash(); omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } void poll() { switch (omega.poll()) { case 0: break; default: omega.matrix.drawPixel(0, 0, LED_OFF); omega.matrix.writeDisplay(); delay(125); } omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } void loop() { poll(); } Congratulations! You've just written your first Project OMEGA game.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"This tutorial will act as a step-by-step guide to get you writing and running your first Project OMEGA game.","title":"Getting started"},{"location":"getting-started/#setup","text":"Make sure you've installed the Arduino IDE for your operating system of choice before continuing. From there, you'll need to install Project OMEGA's dependencies: Adafruit_GFX Adafruit_LEDBackpack Bounce2 Caution The version of the Bounce2 library that's hosted at the provided GitHub link will not work with Project OMEGA. Be sure to install it through the Arduino IDE, in Tools > Manage Libraries. After everything is installed, open up a blank sketch in the Arduino IDE. You should see the standard setup() and loop() functions. Don't worry about these for now; we'll get to them in a moment.","title":"Setup"},{"location":"getting-started/#importing-the-library","text":"To import the Project OMEGA library, add the following lines just before the setup() function: #include <Omega.h> Omega omega = Omega(); The first line actually imports the definitions added by the library; the second line creates an object named omega with the same definitions. You'll use this object in your game code later on. Note omega is the recommended name for the object, though you can change it to any other name you'd like.","title":"Importing the library"},{"location":"getting-started/#the-setup-function","text":"The setup() function will run just once, at the beginning of your sketch's execution. Add the line omega.init(); inside it. This is used to set up the board's buttons and display; as such, your program will not run without it. If you'd like, you can call the splash() function after this, using omega.splash(); . This is completely optional, though recommended. With this change, a bitmap of the Greek letter omega will be drawn to the display before your game code starts to execute. Finally, we should try drawing something to the display. Add the following lines of code to the end of the function: omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); This will use methods added by Adafruit's graphics library to clear the display and light up the pixel in the top left corner.","title":"The setup function"},{"location":"getting-started/#the-loop-function","text":"To make proper use of the loop() function, we'll have to use one more OMEGA-defined method: omega.poll() . This will repeatedly return an integer from 4 to 8 back to your code if a button was pressed, and 0 otherwise. You'll need to write your own function to determine how this should make your game behave. Add the following function definition to your Arduino sketch, before void loop() : void poll() { switch (omega.poll()) { case 0: break; default: omega.matrix.drawPixel(0, 0, LED_OFF); omega.matrix.writeDisplay(); delay(125); } omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } This function is actually pretty simple! The switch keyword says to do something depending on the output of what's in the parentheses \u2014 in this case, a call to omega.poll() . We do nothing if it returns a 0, and every other case will do the same thing: turn off the pixel in the top left corner of the display. Outside of the switch block, we then turn it on again after a fraction of a second. Finally, we change the loop() function so that it repeatedly calls our new poll() function: void loop() { poll(); } If you set everything up correctly, you should be able to make the top left pixel of the display flash any time you press a button! Note When writing your poll() function, you'll typically want to add a new case for each of the buttons you plan to detect. Remember that these are connected to the numbers 4 through 8, not 0.","title":"The loop function"},{"location":"getting-started/#the-final-result","text":"#include <Omega.h> Omega omega = Omega(); void setup() { omega.init(); omega.splash(); omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } void poll() { switch (omega.poll()) { case 0: break; default: omega.matrix.drawPixel(0, 0, LED_OFF); omega.matrix.writeDisplay(); delay(125); } omega.matrix.clear(); omega.matrix.drawPixel(0, 0, LED_ON); omega.matrix.writeDisplay(); } void loop() { poll(); } Congratulations! You've just written your first Project OMEGA game.","title":"The final result"}]}